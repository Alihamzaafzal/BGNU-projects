import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class GradeBookPage extends StatefulWidget {
  const GradeBookPage({super.key});

  @override
  _GradeBookPageState createState() => _GradeBookPageState();
}

class _GradeBookPageState extends State<GradeBookPage> {
  final List<String> _courses = [
    'App Development',
    'Web Engineering',
    'Artificial Intelligence',
    'Database',
    'Information Security'
  ];

  final Map<String, int> _marksObtained = {};
  String _selectedCourse = 'App Development';
  final TextEditingController _marksController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadMarks();
  }

  // Load saved marks
  Future<void> _loadMarks() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      for (String course in _courses) {
        _marksObtained[course] = prefs.getInt(course) ?? 0;
      }
    });
  }

  // Save marks persistently
  Future<void> _saveMarks() async {
    final prefs = await SharedPreferences.getInstance();
    for (String course in _courses) {
      await prefs.setInt(course, _marksObtained[course]!);
    }
  }

  // Calculate total, percentage, and grade
  int _getTotalMarks() => _marksObtained.values.reduce((a, b) => a + b);
  double _getPercentage() => (_getTotalMarks() / (_courses.length * 100)) * 100;

  String _getGrade(double percentage) {
    if (percentage >= 90) return 'A+';
    if (percentage >= 80) return 'A';
    if (percentage >= 70) return 'B';
    if (percentage >= 60) return 'C';
    if (percentage >= 50) return 'D';
    return 'F';
  }

  // Get Grade Background Color
  Color _getGradeColor(String grade) {
    switch (grade) {
      case 'A+': return Colors.green;
      case 'A': return Colors.lightGreen;
      case 'B': return Colors.blueAccent;
      case 'C': return Colors.orange;
      case 'D': return Colors.deepOrange;
      default: return Colors.red;
    }
  }

  // Clear all data with confirmation
  void _clearAllData() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text("Confirm Reset"),
          content: const Text("Are you sure you want to clear all data?"),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("Cancel"),
            ),
            TextButton(
              onPressed: () async {
                final prefs = await SharedPreferences.getInstance();
                await prefs.clear();
                setState(() {
                  for (String course in _courses) {
                    _marksObtained[course] = 0;
                  }
                });
                Navigator.pop(context);
              },
              child: const Text("Clear", style: TextStyle(color: Colors.red)),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    double percentage = _getPercentage();
    String grade = _getGrade(percentage);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Grade Book', style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold)),
        backgroundColor: Colors.blue.shade900,
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Grade Table
            Expanded(
              child: SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: DataTable(
                  border: TableBorder.all(),
                  columns: const [
                    DataColumn(label: Text('Course Name', style: TextStyle(fontWeight: FontWeight.bold))),
                    DataColumn(label: Text('Marks Obtained', style: TextStyle(fontWeight: FontWeight.bold))),
                    DataColumn(label: Text('Total Marks', style: TextStyle(fontWeight: FontWeight.bold))),
                    DataColumn(label: Text('Percentage', style: TextStyle(fontWeight: FontWeight.bold))),
                    DataColumn(label: Text('Grade', style: TextStyle(fontWeight: FontWeight.bold))),
                  ],
                  rows: _courses.map((course) {
                    double coursePercentage = (_marksObtained[course]! / 100) * 100;
                    String courseGrade = _getGrade(coursePercentage);
                    return DataRow(cells: [
                      DataCell(Text(course)),
                      DataCell(Text(_marksObtained[course]!.toString())),
                      const DataCell(Text("100")),
                      DataCell(Text("${coursePercentage.toStringAsFixed(2)}%")),
                      DataCell(Text(courseGrade, style: TextStyle(color: _getGradeColor(courseGrade)))),
                    ]);
                  }).toList(),
                ),
              ),
            ),
            const SizedBox(height: 20),

            // Marks Input Row
            Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _marksController,
                    keyboardType: TextInputType.number,
                    decoration: const InputDecoration(
                      labelText: 'Enter Marks',
                      border: OutlineInputBorder(),
                    ),
                  ),
                ),
                const SizedBox(width: 10),
                DropdownButton<String>(
                  value: _selectedCourse,
                  onChanged: (value) {
                    setState(() {
                      _selectedCourse = value!;
                      _marksController.text = _marksObtained[_selectedCourse].toString();
                    });
                  },
                  items: _courses.map((course) {
                    return DropdownMenuItem(value: course, child: Text(course));
                  }).toList(),
                ),
              ],
            ),

            const SizedBox(height: 10),

            // Buttons Row
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                ElevatedButton(
                  onPressed: () {
                    int? enteredMarks = int.tryParse(_marksController.text);
                    if (enteredMarks == null || enteredMarks < 0 || enteredMarks > 100) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(content: Text("Please enter valid marks (0-100)!"), backgroundColor: Colors.red),
                      );
                      return;
                    }
                    setState(() {
                      _marksObtained[_selectedCourse] = enteredMarks;
                    });
                    _saveMarks();
                  },
                  style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),
                  child: const Text("Add", style: TextStyle(color: Colors.white)),
                ),
                ElevatedButton(
                  onPressed: _clearAllData,
                  style: ElevatedButton.styleFrom(backgroundColor: Colors.redAccent),
                  child: const Text("Clear All", style: TextStyle(color: Colors.white)),
                ),
              ],
            ),

            const SizedBox(height: 20),

            // Final Grade Display
            Container(
              padding: const EdgeInsets.all(10),
              decoration: BoxDecoration(
                color: _getGradeColor(grade),
                borderRadius: BorderRadius.circular(10),
              ),
              child: Column(
                children: [
                  Text(
                    "Total Percentage: ${percentage.toStringAsFixed(2)}%",
                    style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white),
                  ),
                  Text(
                    "Final Grade: $grade",
                    style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.white),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
